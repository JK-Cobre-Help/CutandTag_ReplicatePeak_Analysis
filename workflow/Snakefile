configfile: "config/config.yml"

##################################################################
##                    Define input functions                    ##
##################################################################

import pandas as pd

# Read the CSV file and set an index using the values in the "sample" column.
samples_table = pd.read_csv(config["samples_csv"]).set_index("sample", drop=False)

# Expand function to extract BAM paths
bam_paths = expand("{bam}", bam=samples_table["bam"].tolist())

# Filter samples by their set
def filter_sample_by_set(Set, samples_table):
    """
    Filter the samples_table to include only the samples
    belonging to a given 'Set' and return their names.
    """
    filtered_rows = samples_table[samples_table["set"] == Set]
    return list(set(filtered_rows["sample"].tolist()))

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        # Ensure BAM and BigWig files for consensus peaks are created
        expand("results/macs2Peaks/{sample}_0.05_peaks.narrowPeak", sample=samples_table.index),
        expand("results/mergedPeaks/{Set}_merged_peaks.rds", Set=list(set(samples_table["set"]))),
        expand("results/consensusPeaks/{Set}_consensus_peaks.bed", Set=list(set(samples_table["set"]))),
        expand("results/consensusPeaks/{Set}_consensus_peaks.bam", Set=list(set(samples_table["set"]))),
        expand("results/consensusPeaks/{Set}_consensus_peaks.bw", Set=list(set(samples_table["set"]))),
        expand("results/eulerPlot/{Set}_eulerPlot.pdf", Set=list(set(samples_table["set"]))),
        "results/overlaps/MidpointOverlaps.bed"

##################################################################
##                        MACS2 Peak Calling                    ##
##################################################################

rule call_peaks_with_macs2:
    input:
        bam=lambda wildcards: samples_table.loc[wildcards.sample, "bam"]
    output:
        peaks="results/macs2Peaks/{sample}_0.05_peaks.narrowPeak",
        summary="results/macs2Peaks/{sample}_macs2Peak_summary.txt"
    params:
        genome=config["genome"],
        qvalue=config["macs2_qvalue"],
        sample_name="{sample}",
        output_dir="results/macs2Peaks/"
    envmodules:
        config["macs2"]
    shell:
        """
        macs2 callpeak -t {input.bam} \
        -g {params.genome} -f BAMPE -n {params.sample_name}_{params.qvalue} \
        --outdir {params.output_dir} -q {params.qvalue} --keep-dup all --nomodel \
        2>{params.output_dir}/{params.sample_name}_macs2Peak_summary.txt
        """

##################################################################
##                     Generate Merged Peaks                    ##
##################################################################

rule generate_merged_peaks:
    input:
        lambda wildcards: expand(
            "results/macs2Peaks/{sample}_0.05_peaks.narrowPeak",
            sample=filter_sample_by_set(wildcards.Set, samples_table)
        )
    output:
        merged="results/mergedPeaks/{Set}_merged_peaks.rds"
    envmodules:
        config["R"]
    shell:
        """
        Rscript scripts/generateMergedPeaks.R {input} {output.merged}
        """

##################################################################
##                Make Bed of Reproducible Peaks                ##
##################################################################

rule make_bed_of_reproducible_peaks:
    input:
        merged="results/mergedPeaks/{Set}_merged_peaks.rds"
    output:
        consensus="results/consensusPeaks/{Set}_consensus_peaks.bed"
    params:
        min_overlap=config["minNumberOfSampleOverlaps"]
    envmodules:
        config["R"]
    shell:
        """
        Rscript scripts/generateConsensusPeaks.R {input.merged} {params.min_overlap} {output.consensus}
        """

##################################################################
##                 Create BAM from Consensus Peaks              ##
##################################################################

rule create_bam_from_consensus:
    input:
        bed="results/consensusPeaks/{Set}_consensus_peaks.bed"
    output:
        bam="results/consensusPeaks/{Set}_consensus_peaks.bam"
    params:
        genome_file=config["chrom_sizes"]
    envmodules:
        config["bedtools"],
        config["samtools"]
    shell:
        """
        bedtools bedtobam -i {input.bed} -g {params.genome_file} > {output.bam}
        samtools index {output.bam}
        """

##################################################################
##               Create BigWig from Consensus Peaks             ##
##################################################################

rule create_bigwig_from_consensus:
    input:
        bam="results/consensusPeaks/{Set}_consensus_peaks.bam"
    output:
        bigwig="results/consensusPeaks/{Set}_consensus_peaks.bw"
    params:
        bin_size=config["binSize"],
        genome_size=config["effective_genome_size"]
    envmodules:
        config["deeptools"]
    shell:
        """
        bamCoverage --bam {input.bam} --outFileName {output.bigwig} \
        --binSize {params.bin_size} --effectiveGenomeSize {params.genome_size} --normalizeUsing CPM
        """

##################################################################
##                  Make Euler with Merged Peaks                ##
##################################################################

rule make_euler_plot_of_overlaps_with_merged:
    input:
        merged_rds="results/mergedPeaks/{Set}_merged_peaks.rds"
    output:
        euler_rds="results/eulerPlot/{Set}_eulerPlot.rds",
        euler_pdf="results/eulerPlot/{Set}_eulerPlot.pdf"
    params:
        euler_fontsize=config["EulerFontSize"],
        euler_colors=config["EulerColors"],
        pdf_width=config["EulerWidth"],
        pdf_height=config["EulerHeight"]
    envmodules:
        config["R"],
        config["bioconductor"]
    shell:
        """
        Rscript scripts/makeEulerOfOverlappingPeaks.R {input.merged_rds} {output.euler_rds} {output.euler_pdf} \
        {params.euler_fontsize} "{params.euler_colors}" {params.pdf_width} {params.pdf_height}
        """

##################################################################
##                   Midpoint and Peak Overlaps                 ##
##################################################################

rule midpoint_and_peak_overlaps:
    input:
        # Collect reproducible peaks BED files (already sorted by earlier rules)
        reproducible_beds=expand("results/consensusPeaks/{Set}_consensus_peaks.bed", Set=list(set(samples_table["set"])))
    output:
        # Outputs: midpoint and full overlaps
        midpoint="results/overlaps/MidpointOverlaps.bed",
        peak="results/overlaps/PeakOverlaps.bed"
    params:
        # Prefix for output files
        output_prefix="results/overlaps/Overlaps"
    envmodules:
        config["R"]
    shell:
        """
        Rscript scripts/midpointAndPeakOverlaps.R {input.reproducible_beds} {params.output_prefix}
        """
