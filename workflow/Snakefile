configfile: "config/config.yml"

# Author: Kevin Boyd
# Date: Dec 3, 2024
# Adapted scripts from: https://github.com/SansamLab-Pipelines-Genomics/ReplicatePeakAnalyzer

##################################################################
##                    Define input functions                    ##
##################################################################

import pandas as pd
import os

# Read the CSV file and set an index using the values in the "sample" column.
samples_table = pd.read_csv(config["samples_csv"]).set_index("sample", drop=False)

# Expand function to extract BAM paths
bam_paths = expand("{bam}", bam=samples_table["bam"].tolist())

# Filter samples by their set
def filter_sample_by_set(Set, samples_table):
    """
    Filter the samples_table to include only the samples
    belonging to a given 'Set' and return their names.
    """
    filtered_rows = samples_table[samples_table["set"] == Set]
    return list(set(filtered_rows["sample"].tolist()))

unique_marks = list(dict.fromkeys(samples_table["mark"]))
unique_conditions = list(dict.fromkeys(samples_table["condition"]))

def sets_for_mark_condition(mark, condition, df):
    """
    Return a list of unique 'set' values where (mark, condition) match.
    """
    subset = df[(df["mark"] == mark) & (df["condition"] == condition)]
    return list(set(subset["set"]))


##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        # Ensure BAM and BigWig files for consensus peaks are created
        expand("results/macs2Peaks/{sample}_0.05_peaks.narrowPeak", sample=samples_table.index),
        expand("results/mergedPeaks/{Set}_merged_peaks.rds", Set=list(set(samples_table["set"]))),
        expand("results/consensusPeaks/{Set}_consensus_peaks.bed", Set=list(set(samples_table["set"]))),
        expand("results/consensusPeaks/{Set}_consensus_peaks.bam", Set=list(set(samples_table["set"]))),
        expand("results/consensusPeaks/{Set}_consensus_peaks.bw", Set=list(set(samples_table["set"]))),
        expand("results/eulerPlot/{Set}_eulerPlot.pdf", Set=list(set(samples_table["set"]))),
        "results/overlaps/MidpointOverlaps.bed",
        expand("results/consensusPeaks/{Set}_unique_MP.bed", Set=list(set(samples_table["set"]))),
        "results/heatmap/Beds_All_Samples.gz",
        "results/heatmap/HeatPlots_All_Samples.png",
        expand("results/eulerPlotMarkByCondition/{mark}_eulerPlot.pdf", mark=unique_marks),
        "results/heatmap/Beds_Unique_Samples.gz",
        "results/heatmap/HeatPlots_Unique_Samples.png"

##################################################################
##                        MACS2 Peak Calling                    ##
##################################################################

rule call_peaks_with_macs2:
    input:
        bam=lambda wildcards: samples_table.loc[wildcards.sample, "bam"]
    output:
        peaks="results/macs2Peaks/{sample}_0.05_peaks.narrowPeak",
        summary="results/macs2Peaks/{sample}_macs2Peak_summary.txt"
    params:
        genome=config["genome"],
        qvalue=config["macs2_qvalue"],
        sample_name="{sample}",
        output_dir="results/macs2Peaks/"
    envmodules:
        config["macs2"]
    shell:
        """
        macs2 callpeak -t {input.bam} \
        -g {params.genome} -f BAMPE -n {params.sample_name}_{params.qvalue} \
        --outdir {params.output_dir} -q {params.qvalue} --keep-dup all --nomodel \
        2>{params.output_dir}/{params.sample_name}_macs2Peak_summary.txt
        """

##################################################################
##                     Generate Merged Peaks                    ##
##################################################################

rule generate_merged_peaks:
    input:
        lambda wildcards: expand(
            "results/macs2Peaks/{sample}_0.05_peaks.narrowPeak",
            sample=filter_sample_by_set(wildcards.Set, samples_table)
        )
    output:
        merged="results/mergedPeaks/{Set}_merged_peaks.rds"
    envmodules:
        config["R"],
        config["bioconductor"]
    shell:
        """
        Rscript scripts/generateMergedPeaks.R {input} {output.merged}
        """

##################################################################
##                Make Bed of Reproducible Peaks                ##
##################################################################

rule make_bed_of_reproducible_peaks:
    input:
        merged="results/mergedPeaks/{Set}_merged_peaks.rds"
    output:
        consensus="results/consensusPeaks/{Set}_consensus_peaks.bed"
    params:
        min_overlap=config["minNumberOfSampleOverlaps"]
    envmodules:
        config["R"],
        config["bioconductor"]
    shell:
        """
        Rscript scripts/generateConsensusPeaks.R {input.merged} {params.min_overlap} {output.consensus}
        """

##################################################################
##                 Create BAM from Consensus Peaks              ##
##################################################################

rule create_bam_from_consensus:
    input:
        bed="results/consensusPeaks/{Set}_consensus_peaks.bed"
    output:
        bam="results/consensusPeaks/{Set}_consensus_peaks.bam",
        sorted_bed="results/consensusPeaks/{Set}_consensus_peaks_sorted.bed"
    params:
        genome_file=config["chrom_sizes"]
    envmodules:
        config["bedtools"],
        config["samtools"]
    shell:
        """
        # 1) Sort the original BED file
        bedtools sort -i {input.bed} > {output.sorted_bed}

        # 2) Convert sorted BED -> BAM, then pipe to samtools sort -> final coordinate-sorted BAM
        bedtools bedtobam -i {output.sorted_bed} -g {params.genome_file} | samtools sort -o {output.bam}

        # 3) Index the coordinate-sorted BAM
        samtools index {output.bam}
        """

##################################################################
##               Create BigWig from Consensus Peaks             ##
##################################################################

rule create_bigwig_from_consensus:
    input:
        bam="results/consensusPeaks/{Set}_consensus_peaks.bam"
    output:
        bigwig="results/consensusPeaks/{Set}_consensus_peaks.bw"
    params:
        bin_size=config["binSize"],
        genome_size=config["effective_genome_size"]
    envmodules:
        config["deeptools"]
    shell:
        """
        bamCoverage --bam {input.bam} --outFileName {output.bigwig} \
        --binSize {params.bin_size} --effectiveGenomeSize {params.genome_size} --normalizeUsing CPM
        """

##################################################################
##                  Make Euler with Merged Peaks                ##
##################################################################

rule make_euler_plot_of_overlaps_with_merged:
    input:
        merged_rds="results/mergedPeaks/{Set}_merged_peaks.rds"
    output:
        euler_rds="results/eulerPlot/{Set}_eulerPlot.rds",
        euler_pdf="results/eulerPlot/{Set}_eulerPlot.pdf"
    params:
        euler_fontsize=config["EulerFontSize"],
        euler_colors=config["EulerColors1"],
        pdf_width=config["EulerWidth"],
        pdf_height=config["EulerHeight"]
    envmodules:
        config["R"],
        config["bioconductor"]
    shell:
        """
        Rscript scripts/makeEulerOfOverlappingPeaks.R {input.merged_rds} {output.euler_rds} {output.euler_pdf} \
        {params.euler_fontsize} "{params.euler_colors}" {params.pdf_width} {params.pdf_height}
        """

##################################################################
##                   Midpoint and Peak Overlaps                 ##
##################################################################

rule midpoint_and_peak_overlaps:
    input:
        # Collect reproducible peaks BED files (already sorted by earlier rules)
        reproducible_beds=expand("results/consensusPeaks/{Set}_consensus_peaks.bed", Set=list(set(samples_table["set"])))
    output:
        # Outputs: midpoint and full overlaps
        midpoint="results/overlaps/MidpointOverlaps.bed",
        peak="results/overlaps/PeakOverlaps.bed",
        unique = expand("results/consensusPeaks/{Set}_unique_MP.bed", Set=list(set(samples_table["set"])))
    params:
        out_dir="results/overlaps/"
    envmodules:
        config["R"],
        config["bioconductor"]
    shell:
        """
        Rscript scripts/midpointAndPeakOverlaps.R {input.reproducible_beds} {params.out_dir}
        """

##################################################################
##                Generate Heatmap for All Samples              ##
##################################################################

# Convert your CSV column into a list in CSV order
all_sets = samples_table["set"]  # e.g., ['H3K27ac_C', 'H3K27ac_T', 'H3K27ac_C', ...]

# Retain only unique sets in the first-seen order
unique_sets_in_order = list(dict.fromkeys(all_sets))

rule generate_heatmap:
    input:
        # Input bigWig files (all consensus peaks bigwigs)
        bigwigs = expand("results/consensusPeaks/{Set}_consensus_peaks.bw", Set=unique_sets_in_order),
        # Input MidpointOverlaps BED file
        midpoints="results/overlaps/MidpointOverlaps.bed"
    output:
        # Output matrix and heatmap
        matrix="results/heatmap/Beds_All_Samples.gz",
        heatmap="results/heatmap/HeatPlots_All_Samples.png"
    params:
        # Extend regions before and after the midpoint
        before_region=3000,
        after_region=3000,
        processors=8,
        refPointName="Center",
        regionsName="Midpoints",
        sampleOrder=config["sampleOrder"]
    envmodules:
        config["deeptools"]
    shell:
        """
        echo "Using sampleOrder: {params.sampleOrder}"

        computeMatrix reference-point \
            -S {input.bigwigs} \
            -R {input.midpoints} \
            --outFileName {output.matrix} \
            -a {params.after_region} -b {params.before_region} \
            --numberOfProcessors {params.processors} \
            --smartLabels

        plotHeatmap \
            -m {output.matrix} \
            -out {output.heatmap} \
            --dpi 1000 \
            --sortUsing sum \
            --sortUsingSamples "{params.sampleOrder}" \
            --refPointLabel "{params.refPointName}" \
            --regionsLabel "{params.regionsName}"
        """

##################################################################
##                Euler Plot Conditions by Mark                 ##
##################################################################

def conditions_for_mark(mark, df):
    subset = df[df["mark"] == mark]
    return sorted(set(subset["condition"]))

def bed_paths_for_mark(mark, df):
    # Build the list of .bed files for each condition
    conds = conditions_for_mark(mark, df)
    return [f"results/consensusPeaks/{mark}_{c}_consensus_peaks.bed" for c in conds]

def joined_conditions_for_mark(wc):
    """
    wc is the wildcard object; wc.mark is the current 'mark' value.
    We return a single comma-separated string, e.g. "C,T" or "C,T,X".
    """
    return ",".join(conditions_for_mark(wc.mark, samples_table))

rule euler_plot_by_mark:
    input:
        lambda wc: bed_paths_for_mark(wc.mark, samples_table)
    output:
        rds="results/eulerPlotMarkByCondition/{mark}_eulerPlot.rds",
        pdf="results/eulerPlotMarkByCondition/{mark}_eulerPlot.pdf"
    params:
        font_size=config["EulerFontSize"],
        colors=config["EulerColors2"],
        pdf_width=config["EulerWidth"],
        pdf_height=config["EulerHeight"],
        set_names=lambda wc: joined_conditions_for_mark(wc)
    envmodules:
        config["R"],
        config["bioconductor"]
    shell:
        """
        # Turn the list of input .bed files into a comma-separated string
        BED_FILES="$(echo {input} | tr ' ' ',')"

        # Pull in your precomputed set_names from params
        SET_NAMES="{params.set_names}"

        echo "BED_FILES => $BED_FILES"
        echo "SET_NAMES => $SET_NAMES"

        Rscript scripts/makeEulerPlotOfBedOverlaps.R \
            "$BED_FILES" \
            "$SET_NAMES" \
            {output.rds} \
            {output.pdf} \
            {params.font_size} \
            "{params.colors}" \
            {params.pdf_width} \
            {params.pdf_height}
        """

##################################################################
##                 Generate Unique Bed Heatmaps                 ##
##################################################################

# preserve original sample order
unique_sets_in_order = list(dict.fromkeys(samples_table["set"].tolist()))

rule generate_unique_heatmap:
    input:
        uniqueBeds = expand("results/consensusPeaks/{Set}_unique_MP.bed", Set=unique_sets_in_order),
        bigwigs   = [f"results/consensusPeaks/{s}_consensus_peaks.bw" for s in unique_sets_in_order]
    output:
        matrix  = "results/heatmap/Beds_Unique_Samples.gz",
        heatmap = "results/heatmap/HeatPlots_Unique_Samples.png"
    params:
        before_region = 3000,
        after_region  = 3000,
        processors    = 8,
        refPointName  = "Center",
        # Convert "1,2,3,4,5,6" to "1 2 3 4 5 6" for deepTools:
        sampleOrder   = config["sampleOrder"].replace(",", " "),
        # Simply extract the sample names in the order the files are provided:
        samplesLabel  = lambda wildcards, input: ",".join(
            [os.path.basename(x).replace("_consensus_peaks.bw", "")
             for x in input.bigwigs]
        )
    envmodules:
        config["deeptools"]
    shell:
        """
        computeMatrix reference-point \
            -S {input.bigwigs} \
            -R {input.uniqueBeds} \
            --outFileName {output.matrix} \
            -a {params.after_region} -b {params.before_region} \
            --numberOfProcessors {params.processors} \
            --smartLabels

        plotHeatmap \
            -m {output.matrix} \
            -out {output.heatmap} \
            --dpi 1000 \
            --sortUsing sum \
            --sortUsingSamples {params.sampleOrder} \
            --refPointLabel "{params.refPointName}" \
            --samplesLabel "{params.samplesLabel}"
        """
