configfile: "config/config.yml"

import pandas as pd

# Define the filter_sample_by_set function
def filter_sample_by_set(Set, samples_table):
    """
    This function filters the samples_table to include only the samples
    belonging to a given 'Set' and returns a list of unique sample names.

    Parameters:
    - Set (str): The identifier for the set of samples to filter.
    - samples_table (pandas.DataFrame): The dataframe containing sample metadata.

    Returns:
    - List[str]: List of sample names in the specified set.
    """
    # Filter rows where 'set' matches the provided Set value
    filtered_rows = samples_table[samples_table['set'] == Set]

    # Extract unique sample names and return them as a list
    return list(set(filtered_rows['sample'].tolist()))

# Read and process the samples table
samples_table = pd.read_csv(config["samples_csv"]).set_index("sample", drop=False)
samples_table = samples_table.astype(str)  # Ensures all values are converted to strings
samples_lst = samples_table['sample'].to_list()

##################################################################
##                           rules                              ##
##################################################################

rule all:
    input:
        # Ensure BAM and BigWig files for consensus peaks are created
        expand("results/consensusPeaks/{Set}_consensus_peaks.bam", Set=list(set(samples_table['set']))),
        expand("results/consensusPeaks/{Set}_consensus_peaks.bw", Set=list(set(samples_table['set'])))

# Call peaks with MACS2
rule call_peaks_with_macs2:
    input:
        bam="results/processed/{sample}.bam"
    output:
        peaks="results/macs2Peaks/{sample}_peaks.narrowPeak",
        summary="results/macs2Peaks/{sample}_macs2Peak_summary.txt"
    params:
        genome=config["genome"],
        qvalue=config["macs2_qvalue"],
        sample_name="{sample}",
        output_dir="results/macs2Peaks/"
    envmodules:
        "macs2"
    shell:
        """
        macs2 callpeak -t {input.bam} \
        -g {params.genome} -f BAMPE -n {params.sample_name}_{params.qvalue} \
        --outdir {params.output_dir} -q {params.qvalue} --keep-dup all --nomodel \
        2>{params.output_dir}/{params.sample_name}_macs2Peak_summary.txt
        """

# Generate consensus peaks from replicates
rule generate_consensus_peaks:
    input:
        lambda wildcards: expand(
            "results/macs2Peaks/{sample}_peaks.narrowPeak",
            sample=filter_sample_by_set(wildcards.Set, samples_table)
        )
    output:
        consensus="results/consensusPeaks/{Set}_consensus_peaks.rds"
    params:
        min_overlap=config["minNumberOfSampleOverlaps"]
    envmodules:
        "r"
    script:
        "scripts/reportOverlappingPeaks.R"

# Filter consensus peaks to BED format
rule make_bed_of_reproducible_peaks:
    input:
        "results/consensusPeaks/{Set}_consensus_peaks.rds"
    output:
        "results/consensusPeaks/{Set}_consensus_peaks.bed"
    params:
        min_overlap=config["minNumberOfSampleOverlaps"]
    envmodules:
        "r"
    script:
        "scripts/make_bed_of_reproducible_peaks.R"

# Create BAM files from consensus peaks
rule create_bam_from_consensus:
    input:
        bed="results/consensusPeaks/{Set}_consensus_peaks.bed"
    output:
        bam="results/consensusPeaks/{Set}_consensus_peaks.bam"
    params:
        genome_file="resources/hg38.chrom.sizes"  # Genome size file
    envmodules:
        "bedtools",
        "samtools"
    shell:
        """
        bedtools bedtobam -i {input.bed} -g {params.genome_file} > {output.bam}
        samtools index {output.bam}
        """

# Create BigWig files from consensus peaks
rule create_bigwig_from_consensus:
    input:
        bam="results/consensusPeaks/{Set}_consensus_peaks.bam"
    output:
        bigwig="results/consensusPeaks/{Set}_consensus_peaks.bw"
    params:
        bin_size=config["binSize"],
        genome_size=config["effective_genome_size"]
    envmodules:
        "deeptools"
    shell:
        """
        bamCoverage --bam {input.bam} --outFileName {output.bigwig} \
        --binSize {params.bin_size} --effectiveGenomeSize {params.genome_size} --normalizeUsing CPM
        """
